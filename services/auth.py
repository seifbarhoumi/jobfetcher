import requests
from tenacity import retry, stop_after_attempt, wait_exponential

from utils.config import settings
from utils.logger import logger


@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=1, max=4))
def get_access_token():
    """R√©cup√®re le token d'acc√®s OAuth2 depuis l'API de France Travail avec gestion des erreurs."""
    data = {
        "grant_type": "client_credentials",
        "client_id": settings.CLIENT_ID,
        "client_secret": settings.CLIENT_SECRET,
        "scope": settings.API_SCOPE
    }
    print("üîç Donn√©es envoy√©es :", data)

    try:
        response = requests.post(settings.AUTH_URL, data=data, timeout=10)
        response.raise_for_status()  # L√®ve une exception si code 4xx ou 5xx

        json_response = response.json()
        access_token = json_response.get("access_token")

        if not access_token:
            logger.error("‚ö†Ô∏è R√©ponse re√ßue, mais le token est absent !")
            logger.debug(f"üîç R√©ponse brute : {json_response}")
            raise ValueError("Le token d'acc√®s est introuvable dans la r√©ponse.")

        logger.info("‚úÖ Token r√©cup√©r√© avec succ√®s.")
        return access_token

    except requests.exceptions.HTTPError as e:
        status_code = response.status_code
        errors = {
            400: "‚ùå Erreur 400 : Requ√™te invalide. V√©rifiez les param√®tres envoy√©s.",
            401: "‚ùå Erreur 401 : Identifiants invalides. V√©rifiez CLIENT_ID et CLIENT_SECRET.",
            403: "‚ùå Erreur 403 : Acc√®s refus√©. V√©rifiez les permissions de votre application.",
            429: f"‚ö†Ô∏è Erreur 429 : Trop de requ√™tes. R√©essayez apr√®s {response.headers.get('Retry-After', 'inconnu')} secondes.",
            500: "‚ùå Erreur 500 : Probl√®me serveur sur l'API de France Travail."
        }
        logger.error(errors.get(status_code, f"‚ùå Erreur {status_code} : Impossible d'obtenir le token."))
        logger.debug(f"üîç R√©ponse brute : {response.text[:500]}")
        raise

    except requests.exceptions.ConnectionError:
        logger.critical("‚ùå Erreur : Impossible de se connecter √† l'API. V√©rifiez votre connexion internet.")
        raise
    except requests.exceptions.Timeout:
        logger.critical("‚ùå Erreur : Temps de r√©ponse trop long. L'API ne r√©pond pas.")
        raise
    except requests.exceptions.RequestException as e:
        logger.critical(f"‚ùå Erreur inattendue : {e}")
        raise
